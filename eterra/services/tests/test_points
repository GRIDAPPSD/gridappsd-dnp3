# -*- coding: utf-8 -*- {{{
# vim: set fenc=utf-8 ft=python sw=4 ts=4 sts=4 et:
#
# Copyright 2018, SLAC / 8minutenergy / Kisensum.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This material was prepared in part as an account of work sponsored by an agency of
# the United States Government. Neither the United States Government nor the
# United States Department of Energy, nor SLAC, nor 8minutenergy, nor Kisensum, nor any of their
# employees, nor any jurisdiction or organization that has cooperated in the
# development of these materials, makes any warranty, express or
# implied, or assumes any legal liability or responsibility for the accuracy,
# completeness, or usefulness or any information, apparatus, product,
# software, or process disclosed, or represents that its use would not infringe
# privately owned rights. Reference herein to any specific commercial product,
# process, or service by trade name, trademark, manufacturer, or otherwise
# does not necessarily constitute or imply its endorsement, recommendation, or
# favoring by the United States Government or any agency thereof, or
# SLAC, 8minutenergy, or Kisensum. The views and opinions of authors expressed
# herein do not necessarily state or reflect those of the
# United States Government or any agency thereof.
# }}}

from datetime import datetime
import json
import logging
import pytz

_log = logging.getLogger(__name__)

class PointDefinitions(object):
    """In-memory repository of PointDefinitions."""

    def __init__(self, point_definitions_path=None):
        self._points = {}
        self._point_variation_dict = {}
        self._point_name_dict = {}
        self.point_definitions_path ="/home/osboxes/repos/gridappsd-dnp3/eterra/services/examples/"
        # if point_definitions_path:
        #     file_path = os.path.expandvars(os.path.expanduser(point_definitions_path))
        #     self.load_points_from_json_file(file_path)

    def load_points_from_json_file(self, point_file_path):
        """Load and cache a dictionary of PointDefinitions, indexed by point_type and point index."""
        point_file_path = self.point_definitions_path.mynewpoints.json  # type: list()
        log.debug('Loading DNP3 point definitions from {}.'.format(point_file_path))
            with open(point_file_path, 'r') as f:
                    # Filter comments out of the file's contents before loading it as JSON.



            











